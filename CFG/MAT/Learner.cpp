#include "Learner.h"

Learner::Learner(MinimallyAdequateTeacher mat) : _mat(mat)
{
}

Learner::~Learner()
{
}

ContextFreeGrammar Learner::LearnCFG()
{
    ContextFreeLanguage language = this->_mat.getLanguage();
    string lambda = language.lambda;
    ObservationTable observationTable(this->_mat);

    observationTable.K.insert(lambda);

    //TODO not sure if the alphabet of the language should be included in K from the start (Learner::LearnCFG())
    // set<string> alphabetSet = this->_mat.getLanguage().getAlphabet().get();
    // observationTable.K.insert(alphabetSet.begin(), alphabetSet.end());

    observationTable.F.insert({ lambda, lambda });
    if (language.in(lambda)) {
        observationTable.D.insert(lambda);
    }

    observationTable.computeKK();
    observationTable.build(); // Note: Sample run Step 0
    observationTable.MakeConsistent(); // Note: this should be consistent because it has only one raw

    //TODO find a way to not redeclare this CcontextFreeGrammar G twice
    ContextFreeGrammar G = observationTable.MakeGrammar(); // Note: this grammar should generate the language {lambda}

    set<string> LG; LG.insert(""); //TODO implement this language (generated by the new grammar)

    while (true) {
        //FIXME this is not working, somehow it passes the wrong grammar (the one specified above)
        //FIXME even after it is being reinitialized below
        if (this->_mat.Equiv(G)) {
            return G;
        }
        string w = this->_mat.getCounterExample();

        //TODO Query the current language (LG), and it undergenerates
        if (LG.find(w) == LG.end()) { // Not found
            observationTable.addPositiveCounterExample(w);
        } else {
            observationTable.AddContexts(G, w);
        }

        observationTable.computeKK();
        observationTable.build(); // Note: the first time when this executes -> Sample Step 1
        observationTable.MakeConsistent();
        // Note: It is consistent because the only two strings in K that are similar are lambda and "ab",
        //     and these are in fact congruent
        ContextFreeGrammar G = observationTable.MakeGrammar();
        LG.insert("aab"); //TODO remove this after you figure out the language renderer part
    }
}
